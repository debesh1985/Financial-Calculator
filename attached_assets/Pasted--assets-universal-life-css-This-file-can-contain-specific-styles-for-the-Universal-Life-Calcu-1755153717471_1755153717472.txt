* assets/universal-life.css */ /* This file can contain specific styles for the Universal Life Calculator page */ /* Many general styles are inherited from assets/style.css and the inline styles */ /* Example: More specific styling if needed */ .universal-life-specific-class { /* Styles here */ } // assets/universal-life.js document.addEventListener('DOMContentLoaded', () => { const dobInput = document.getElementById('dob'); const ageDisplay = document.getElementById('ageDisplay'); const coverageAmountInput = document.getElementById('coverageAmount'); const genderSelect = document.getElementById('gender'); const premiumFrequencySelect = document.getElementById('premiumFrequency'); const healthStatusSelect = document.getElementById('healthStatus'); const smokingStatusSelect = document.getElementById('smokingStatus'); const occupationRiskSelect = document.getElementById('occupationRisk'); const calculateBtn = document.getElementById('calculateBtn'); const resultsSection = document.getElementById('resultsSection'); // Result elements const estimatedMonthlyPremium = document.getElementById('estimatedMonthlyPremium'); const estimatedAnnualPremium = document.getElementById('estimatedAnnualPremium'); const estimatedTotalPaid10Y = document.getElementById('estimatedTotalPaid10Y'); const estimatedTotalPaid20Y = document.getElementById('estimatedTotalPaid20Y'); // Breakdown elements const ageFactorDisplay = document.getElementById('ageFactor'); const genderFactorDisplay = document.getElementById('genderFactor'); const healthFactorDisplay = document.getElementById('healthFactor'); const smokingFactorDisplay = document.getElementById('smokingFactor'); const occupationFactorDisplay = document.getElementById('occupationFactor'); const basePremiumULDisplay = document.getElementById('basePremiumUL'); // --- Helper Functions --- function calculateAge(dob) { const today = new Date(); const birthDate = new Date(dob); let age = today.getFullYear() - birthDate.getFullYear(); const monthDiff = today.getMonth() - birthDate.getMonth(); if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) { age--; } return age; } // --- Pricing Logic (Simplified for demonstration) --- // This is a highly simplified model. Real UL pricing is complex. // Base rate per $1000 coverage, adjusted by factors. const BASE_RATE_PER_1000 = 1.5; // Example base rate for $1000 coverage // Factor tables - these are illustrative and not actual insurance rates. // Real rates depend on specific product, company, and underwriting. const ageFactors = { 18: 0.8, 25: 1.0, 30: 1.2, 35: 1.5, 40: 1.8, 45: 2.2, 50: 2.7, 55: 3.3, 60: 4.0, 65: 4.8, 70: 5.8 }; const genderFactors = { male: 1.1, female: 0.9 }; const healthFactors = { excellent: 0.8, good: 1.0, average: 1.3, poor: 1.8 }; const smokingFactors = { never: 1.0, former: 1.2, current: 1.7 }; const occupationFactors = { low: 1.0, medium: 1.2, high: 1.5 }; function getFactor(factors, key, defaultValue = 1.0) { // For age, find the closest age bracket or interpolate if needed. // Here, we'll use a simple lookup for specific ages or nearest lower. if (key === 'age') { let currentAge = parseInt(key); let closestAge = 18; // Default to min age // Iterate through keys to find the largest age <= currentAge const sortedAges = Object.keys(factors).map(Number).sort((a, b) => a - b); for (const age of sortedAges) { if (age <= currentAge) { closestAge = age; } else { break; // Found the first age greater than currentAge } } return factors[closestAge] || defaultValue; } return factors[key] || defaultValue; } function calculatePremium() { const age = parseInt(ageDisplay.value); const coverage = parseInt(coverageAmountInput.value); const gender = genderSelect.value; const health = healthStatusSelect.value; const smoking = smokingStatusSelect.value; const occupation = occupationRiskSelect.value; if (isNaN(age) || age < 18 || age > 70 || isNaN(coverage) || coverage < 50000) { alert("Please enter valid age (18-70) and a coverage amount of at least $50,000."); return; } // Calculate factor values const ageFactorValue = getFactor(ageFactors, age); const genderFactorValue = getFactor(genderFactors, gender); const healthFactorValue = getFactor(healthFactors, health); const smokingFactorValue = getFactor(smokingFactors, smoking); const occupationFactorValue = getFactor(occupationFactors, occupation); // Calculate base premium per $1000 coverage using the base rate let basePremiumPer1000 = BASE_RATE_PER_1000; // Apply factors to determine adjusted rate per $1000 const adjustedRatePer1000 = basePremiumPer1000 * ageFactorValue * genderFactorValue * healthFactorValue * smokingFactorValue * occupationFactorValue; // Calculate monthly premium based on the adjusted rate const monthlyPremium = (adjustedRatePer1000 / 1000) * coverage; // Display factors and the calculated base premium ageFactorDisplay.textContent = `(${(ageFactorValue * 100).toFixed(0)}%)`; genderFactorDisplay.textContent = `(${genderFactorValue.toFixed(1)}x)`; healthFactorDisplay.textContent = `(${(healthFactorValue * 100).toFixed(0)}%)`; smokingFactorDisplay.textContent = `(${(smokingFactorValue * 100).toFixed(0)}%)`; occupationFactorDisplay.textContent = `(${(occupationFactorValue * 100).toFixed(0)}%)`; basePremiumULDisplay.textContent = `$${monthlyPremium.toFixed(2)}`; // Display results based on selected payment frequency let calculatedMonthly = monthlyPremium; let calculatedAnnual = calculatedMonthly; let calculatedTotal10Y = calculatedMonthly * 12 * 10; let calculatedTotal20Y = calculatedMonthly * 12 * 20; switch (premiumFrequencySelect.value) { case 'quarterly': calculatedMonthly = monthlyPremium * 3; calculatedAnnual = calculatedMonthly; calculatedTotal10Y = calculatedMonthly * 4 * 10; calculatedTotal20Y = calculatedMonthly * 4 * 20; break; case 'annually': calculatedMonthly = monthlyPremium * 12; calculatedAnnual = calculatedMonthly; calculatedTotal10Y = calculatedMonthly * 10; calculatedTotal20Y = calculatedMonthly * 20; break; default: // monthly calculatedMonthly = monthlyPremium; calculatedAnnual = calculatedMonthly * 12; calculatedTotal10Y = calculatedMonthly * 12 * 10; calculatedTotal20Y = calculatedMonthly * 12 * 20; break; } estimatedMonthlyPremium.textContent = `$${calculatedMonthly.toFixed(2)}`; estimatedAnnualPremium.textContent = `$${calculatedAnnual.toFixed(2)}`; estimatedTotalPaid10Y.textContent = `$${calculatedTotal10Y.toFixed(2)}`; estimatedTotalPaid20Y.textContent = `$${calculatedTotal20Y.toFixed(2)}`; resultsSection.style.display = 'block'; } // --- Event Listeners --- dobInput.addEventListener('change', () => { const dobValue = dobInput.value; if (dobValue) { const age = calculateAge(dobValue); ageDisplay.value = age; // Optionally trigger calculation here if all other fields are valid } }); // If DOB is already set in the input (e.g., from server or initial load), calculate age if (dobInput.value) { const age = calculateAge(dobInput.value); ageDisplay.value = age; } else { // Set a default DOB if none is provided to show a starting age, e.g., 30 const defaultAge = 30; const defaultDate = new Date(); defaultDate.setFullYear(defaultDate.getFullYear() - defaultAge); dobInput.valueAsDate = defaultDate; ageDisplay.value = defaultAge; } calculateBtn.addEventListener('click', calculatePremium); // Perform an initial calculation if DOB is set upon page load if (dobInput.value) { calculatePremium(); } });